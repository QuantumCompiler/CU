{"ast":null,"code":"import axios from 'axios';\n/*  SpoonAPI - A function to get recipes by ingredients with spoonacular API\n    Inputs:\n        ingredients: A string of ingredients separated by commas\n        number: The number of recipes to return (default: 10)\n        ranking: The ranking of the recipes (default: 1)\n        ignorePantry: A boolean to ignore pantry ingredients (default: false)\n    Algorithm:\n        * Create a query object with the specified parameters\n            * ingredients: The list of ingredients\n            * number: The number of recipes to return\n            * ranking: The ranking of the recipes\n            * ignorePantry: A boolean to ignore pantry ingredients\n        * Create a URL object with the spoonacular API endpoint\n        * Add the query parameters to the URL\n        * Create a headers object with the API key and host\n            * x-rapidapi-key - 0969f52154mshf5d39e0b2d8cbf0p1af05bjsn7ac99719ef08\n            * x-rapidapi-host - spoonacular-recipe-food-nutrition-v1.p.rapidapi.com\n        * Fetch the data from the API using the URL and headers\n            * Response is converted to JSON\n            * Data is stored in local storage\n            * Data is logged to the console\n            * Error is logged to the console (if applicable)\n    Return:\n        Logs the data from the spoonacular API to the console\n*/\nexport default async function SpoonAPI(ingArray, username, number = 10, ranking = 1, ignorePantry = false) {\n  var newRecipe = false;\n  console.clear();\n  const userName = username.username;\n  let ingredients = ingArray.map(ing => ing.value).join(',');\n  const [recipeExists, previousRecipe] = await searchDB(userName, ingredients);\n  if (recipeExists) {\n    console.log(`Recipe with ingredients {${ingredients}} already exists! Spoonacular call subverted.`);\n    localStorage.setItem('NewRecipe', previousRecipe.result);\n    console.log('Recipe added to local storage as NewRecipe');\n  } else {\n    console.log(`Recipe with ingredients {${ingredients}} was not found`);\n    const query = {\n      ingredients: ingredients,\n      number: number,\n      ranking: ranking,\n      ignorePantry: ignorePantry\n    };\n    const url = new URL(\"https://spoonacular-recipe-food-nutrition-v1.p.rapidapi.com/recipes/findByIngredients\");\n    url.search = new URLSearchParams(query).toString();\n    const headers = {\n      \"x-rapidapi-key\": \"0969f52154mshf5d39e0b2d8cbf0p1af05bjsn7ac99719ef08\",\n      \"x-rapidapi-host\": \"spoonacular-recipe-food-nutrition-v1.p.rapidapi.com\"\n    };\n    try {\n      console.log('Sending request to spoonacular.');\n      const response = await fetch(url, {\n        headers: headers\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      const stringData = JSON.stringify(data);\n      localStorage.setItem('NewRecipe', stringData);\n      console.log('Response received from spoonacular.');\n      await addRecipe(userName, ingredients, stringData);\n      newRecipe = true;\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  }\n  return newRecipe;\n}\n_c = SpoonAPI;\nasync function searchDB(userName, ingredients) {\n  let recipeExists = false;\n  let previousRecipe = '';\n  try {\n    const response = await axios.post('http://localhost:3308/search-recipe', {\n      user_id: userName,\n      ingredients: ingredients\n    });\n    if (response.status === 200) {\n      const {\n        exists,\n        recipe\n      } = response.data;\n      recipeExists = exists;\n      previousRecipe = recipe;\n      return [recipeExists, previousRecipe];\n    }\n  } catch (error) {\n    console.error(`Error occurred: ${error.message}`);\n  }\n  return [recipeExists, previousRecipe];\n}\nasync function addRecipe(user_id, ingredients, result) {\n  try {\n    const response = await axios.post('http://localhost:3308/add-recipe', {\n      user_id,\n      ingredients,\n      result\n    });\n    if (response.status === 200 || response.status === 201) {\n      const data = response.data;\n      console.log(`Recipe added successfully with ID: ${data.id}`);\n    } else {\n      const errorData = response.data;\n      console.error(`Error occurred: ${errorData.error}`);\n    }\n  } catch (error) {\n    console.error('Error config:', error.config);\n  }\n}\nvar _c;\n$RefreshReg$(_c, \"SpoonAPI\");","map":{"version":3,"names":["axios","SpoonAPI","ingArray","username","number","ranking","ignorePantry","newRecipe","console","clear","userName","ingredients","map","ing","value","join","recipeExists","previousRecipe","searchDB","log","localStorage","setItem","result","query","url","URL","search","URLSearchParams","toString","headers","response","fetch","ok","Error","status","data","json","stringData","JSON","stringify","addRecipe","error","_c","post","user_id","exists","recipe","message","id","errorData","config","$RefreshReg$"],"sources":["/Users/taylor/Documents/CSPB 3308/Recipe-Genie/recipe-genie/src/JS/Utilities/SpoonAPI.js"],"sourcesContent":["import axios from 'axios';\n/*  SpoonAPI - A function to get recipes by ingredients with spoonacular API\n    Inputs:\n        ingredients: A string of ingredients separated by commas\n        number: The number of recipes to return (default: 10)\n        ranking: The ranking of the recipes (default: 1)\n        ignorePantry: A boolean to ignore pantry ingredients (default: false)\n    Algorithm:\n        * Create a query object with the specified parameters\n            * ingredients: The list of ingredients\n            * number: The number of recipes to return\n            * ranking: The ranking of the recipes\n            * ignorePantry: A boolean to ignore pantry ingredients\n        * Create a URL object with the spoonacular API endpoint\n        * Add the query parameters to the URL\n        * Create a headers object with the API key and host\n            * x-rapidapi-key - 0969f52154mshf5d39e0b2d8cbf0p1af05bjsn7ac99719ef08\n            * x-rapidapi-host - spoonacular-recipe-food-nutrition-v1.p.rapidapi.com\n        * Fetch the data from the API using the URL and headers\n            * Response is converted to JSON\n            * Data is stored in local storage\n            * Data is logged to the console\n            * Error is logged to the console (if applicable)\n    Return:\n        Logs the data from the spoonacular API to the console\n*/\nexport default async function SpoonAPI(ingArray, username, number = 10, ranking = 1, ignorePantry = false) {\n    var newRecipe = false;\n    console.clear();\n    const userName = username.username;\n    let ingredients = ingArray.map(ing => ing.value).join(',');\n    const [recipeExists, previousRecipe] = await searchDB(userName, ingredients);\n    if (recipeExists) {\n        console.log(`Recipe with ingredients {${ingredients}} already exists! Spoonacular call subverted.`);\n        localStorage.setItem('NewRecipe', previousRecipe.result);\n        console.log('Recipe added to local storage as NewRecipe');\n    } else {\n        console.log(`Recipe with ingredients {${ingredients}} was not found`);\n        const query = {\n            ingredients: ingredients,\n            number: number,\n            ranking: ranking,\n            ignorePantry: ignorePantry\n        };\n        const url = new URL(\"https://spoonacular-recipe-food-nutrition-v1.p.rapidapi.com/recipes/findByIngredients\");\n        url.search = new URLSearchParams(query).toString();\n        const headers = {\n            \"x-rapidapi-key\": \"0969f52154mshf5d39e0b2d8cbf0p1af05bjsn7ac99719ef08\",\n            \"x-rapidapi-host\": \"spoonacular-recipe-food-nutrition-v1.p.rapidapi.com\"\n        };\n        try {\n            console.log('Sending request to spoonacular.');\n            const response = await fetch(url, { headers: headers });\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            const data = await response.json();\n            const stringData = JSON.stringify(data);\n            localStorage.setItem('NewRecipe', stringData);\n            console.log('Response received from spoonacular.');\n            await addRecipe(userName, ingredients, stringData);\n            newRecipe = true;\n        } catch (error) {\n            console.error('Error:', error);\n        }\n    }\n    return newRecipe;\n}\n\nasync function searchDB(userName, ingredients) {\n    let recipeExists = false;\n    let previousRecipe = '';\n    try {\n        const response = await axios.post('http://localhost:3308/search-recipe', {\n            user_id: userName,\n            ingredients: ingredients\n        });\n        if (response.status === 200) {\n            const { exists, recipe } = response.data;\n            recipeExists = exists;\n            previousRecipe = recipe;\n            return [recipeExists, previousRecipe];\n        }\n    } catch (error) {\n        console.error(`Error occurred: ${error.message}`);\n    }\n    return [recipeExists, previousRecipe];\n}\n\nasync function addRecipe(user_id, ingredients, result) {\n    try {\n        const response = await axios.post('http://localhost:3308/add-recipe', {\n            user_id,\n            ingredients,\n            result\n        });\n        if (response.status === 200 || response.status === 201) {\n            const data = response.data;\n            console.log(`Recipe added successfully with ID: ${data.id}`);\n        } else {\n            const errorData = response.data;\n            console.error(`Error occurred: ${errorData.error}`);\n        }\n    } catch (error) {\n        console.error('Error config:', error.config);\n    }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}