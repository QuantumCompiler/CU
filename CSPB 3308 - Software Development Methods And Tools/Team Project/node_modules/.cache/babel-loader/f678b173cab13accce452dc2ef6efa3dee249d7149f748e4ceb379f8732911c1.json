{"ast":null,"code":"import Ingredient from './IngredientClass.js';\n/*  Recipe - A class to store recipe information\n    Inputs:\n        recipeInfo: An object containing the recipe information\n    Properties:\n        ID: The ID of the recipe\n        Title: The title of the recipe\n        Image: The URL of the recipe image\n        ImageType: The type of image\n        UsedIngredientCount: The number of used ingredients\n        MissedIngredientCount: The number of missing ingredients\n        MissedIngredients: An array of missing ingredients\n        UsedIngredients: An array of used ingredients\n        UnusedIngredients: An array of unused ingredients\n        Likes: The number of likes for the recipe\n    Methods:\n        ShowUsedIngredientsNames: A function to display the names of the used ingredients\n        ShowMissingIngredientsNames: A function to display the names of the missing ingredients\n*/\nexport default class Recipe {\n  constructor(recipeInfo) {\n    this.ID = recipeInfo.id;\n    this.Title = recipeInfo.title;\n    this.Image = recipeInfo.image;\n    this.ImageType = recipeInfo.imageType;\n    this.UsedIngredientCount = recipeInfo.usedIngredientCount;\n    this.MissedIngredientCount = recipeInfo.missedIngredientCount;\n    this.MissedIngredients = [];\n    for (let i = 0; i < this.MissedIngredientCount; i++) {\n      this.MissedIngredients.push(new Ingredient(recipeInfo.missedIngredients[i]));\n    }\n    this.UsedIngredients = [];\n    for (let i = 0; i < this.UsedIngredientCount; i++) {\n      this.UsedIngredients.push(new Ingredient(recipeInfo.usedIngredients[i]));\n    }\n    this.UnusedIngredients = [];\n    for (let i = 0; i < this.UnusedIngredients.length; i++) {\n      this.UnusedIngredients.push(new Ingredient(recipeInfo.unusedIngredients[i]));\n    }\n    this.Likes = recipeInfo.likes;\n  }\n\n  /*  ShowUsedIngredientsNames - A function to display the names of the used ingredients\n      Inputs:\n          None\n      Algorithm:\n          * Create a string to store the names of the used ingredients\n          * Loop over the used ingredients and append the names to the string\n          * Return the string\n      Return:\n          A string containing the names of the used ingredients\n  */\n  ShowUsedIngredientsNames() {\n    var used = '';\n    for (let i = 0; i < this.UsedIngredientCount; i++) {\n      if (i < this.UsedIngredientCount - 1) {\n        used += this.UsedIngredients[i].Name + \", \";\n      } else {\n        used += this.UsedIngredients[i].Name + \".\";\n      }\n    }\n    return used;\n  }\n\n  /*  ShowMissingIngredientsNames - A function to display the names of the missing ingredients\n      Inputs:\n          None\n      Algorithm:\n          * Create a string to store the names of the missing ingredients\n          * Loop over the missed ingredients and append the names to the string\n          * Return the string\n      Return:\n          A string containing the names of the missing ingredients\n  */\n  ShowMissingIngredientsNames() {\n    var missing = '';\n    for (let i = 0; i < this.MissedIngredientCount; i++) {\n      if (i < this.MissedIngredientCount - 1) {\n        missing += this.MissedIngredients[i].Name + \", \";\n      } else {\n        missing += this.MissedIngredients[i].Name + \".\";\n      }\n    }\n    return missing;\n  }\n}","map":{"version":3,"names":["Ingredient","Recipe","constructor","recipeInfo","ID","id","Title","title","Image","image","ImageType","imageType","UsedIngredientCount","usedIngredientCount","MissedIngredientCount","missedIngredientCount","MissedIngredients","i","push","missedIngredients","UsedIngredients","usedIngredients","UnusedIngredients","length","unusedIngredients","Likes","likes","ShowUsedIngredientsNames","used","Name","ShowMissingIngredientsNames","missing"],"sources":["/Users/taylor/Documents/CSPB 3308/Recipe-Genie/recipe-genie/src/JS/Utilities/RecipeClass.js"],"sourcesContent":["import Ingredient from './IngredientClass.js'\n/*  Recipe - A class to store recipe information\n    Inputs:\n        recipeInfo: An object containing the recipe information\n    Properties:\n        ID: The ID of the recipe\n        Title: The title of the recipe\n        Image: The URL of the recipe image\n        ImageType: The type of image\n        UsedIngredientCount: The number of used ingredients\n        MissedIngredientCount: The number of missing ingredients\n        MissedIngredients: An array of missing ingredients\n        UsedIngredients: An array of used ingredients\n        UnusedIngredients: An array of unused ingredients\n        Likes: The number of likes for the recipe\n    Methods:\n        ShowUsedIngredientsNames: A function to display the names of the used ingredients\n        ShowMissingIngredientsNames: A function to display the names of the missing ingredients\n*/\nexport default class Recipe {\n    constructor(recipeInfo) {\n        this.ID = recipeInfo.id;\n        this.Title = recipeInfo.title;\n        this.Image = recipeInfo.image;\n        this.ImageType = recipeInfo.imageType;\n        this.UsedIngredientCount = recipeInfo.usedIngredientCount;\n        this.MissedIngredientCount = recipeInfo.missedIngredientCount;\n        this.MissedIngredients = [];\n        for (let i = 0; i < this.MissedIngredientCount; i++) {\n            this.MissedIngredients.push(new Ingredient(recipeInfo.missedIngredients[i]));\n        }\n        this.UsedIngredients = [];\n        for (let i = 0; i < this.UsedIngredientCount; i++) {\n            this.UsedIngredients.push(new Ingredient(recipeInfo.usedIngredients[i]));\n        }\n        this.UnusedIngredients = [];\n        for (let i = 0; i < this.UnusedIngredients.length; i++) {\n            this.UnusedIngredients.push(new Ingredient(recipeInfo.unusedIngredients[i]));\n        }\n        this.Likes = recipeInfo.likes;\n    }\n\n    /*  ShowUsedIngredientsNames - A function to display the names of the used ingredients\n        Inputs:\n            None\n        Algorithm:\n            * Create a string to store the names of the used ingredients\n            * Loop over the used ingredients and append the names to the string\n            * Return the string\n        Return:\n            A string containing the names of the used ingredients\n    */\n    ShowUsedIngredientsNames() {\n        var used = '';\n        for (let i = 0; i < this.UsedIngredientCount; i++) {\n            if (i < this.UsedIngredientCount - 1) {\n                used += this.UsedIngredients[i].Name + \", \";\n            }\n            else {\n                used += this.UsedIngredients[i].Name + \".\";\n            }\n        }\n        return used;\n    }\n\n    /*  ShowMissingIngredientsNames - A function to display the names of the missing ingredients\n        Inputs:\n            None\n        Algorithm:\n            * Create a string to store the names of the missing ingredients\n            * Loop over the missed ingredients and append the names to the string\n            * Return the string\n        Return:\n            A string containing the names of the missing ingredients\n    */\n    ShowMissingIngredientsNames() {\n        var missing = '';\n        for (let i = 0; i < this.MissedIngredientCount; i++) {\n            if (i < this.MissedIngredientCount - 1) {\n                missing += this.MissedIngredients[i].Name + \", \";\n            }\n            else {\n                missing += this.MissedIngredients[i].Name + \".\";\n            }\n        }\n        return missing;\n    }\n}"],"mappings":"AAAA,OAAOA,UAAU,MAAM,sBAAsB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,MAAMC,MAAM,CAAC;EACxBC,WAAWA,CAACC,UAAU,EAAE;IACpB,IAAI,CAACC,EAAE,GAAGD,UAAU,CAACE,EAAE;IACvB,IAAI,CAACC,KAAK,GAAGH,UAAU,CAACI,KAAK;IAC7B,IAAI,CAACC,KAAK,GAAGL,UAAU,CAACM,KAAK;IAC7B,IAAI,CAACC,SAAS,GAAGP,UAAU,CAACQ,SAAS;IACrC,IAAI,CAACC,mBAAmB,GAAGT,UAAU,CAACU,mBAAmB;IACzD,IAAI,CAACC,qBAAqB,GAAGX,UAAU,CAACY,qBAAqB;IAC7D,IAAI,CAACC,iBAAiB,GAAG,EAAE;IAC3B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACH,qBAAqB,EAAEG,CAAC,EAAE,EAAE;MACjD,IAAI,CAACD,iBAAiB,CAACE,IAAI,CAAC,IAAIlB,UAAU,CAACG,UAAU,CAACgB,iBAAiB,CAACF,CAAC,CAAC,CAAC,CAAC;IAChF;IACA,IAAI,CAACG,eAAe,GAAG,EAAE;IACzB,KAAK,IAAIH,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACL,mBAAmB,EAAEK,CAAC,EAAE,EAAE;MAC/C,IAAI,CAACG,eAAe,CAACF,IAAI,CAAC,IAAIlB,UAAU,CAACG,UAAU,CAACkB,eAAe,CAACJ,CAAC,CAAC,CAAC,CAAC;IAC5E;IACA,IAAI,CAACK,iBAAiB,GAAG,EAAE;IAC3B,KAAK,IAAIL,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACK,iBAAiB,CAACC,MAAM,EAAEN,CAAC,EAAE,EAAE;MACpD,IAAI,CAACK,iBAAiB,CAACJ,IAAI,CAAC,IAAIlB,UAAU,CAACG,UAAU,CAACqB,iBAAiB,CAACP,CAAC,CAAC,CAAC,CAAC;IAChF;IACA,IAAI,CAACQ,KAAK,GAAGtB,UAAU,CAACuB,KAAK;EACjC;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,wBAAwBA,CAAA,EAAG;IACvB,IAAIC,IAAI,GAAG,EAAE;IACb,KAAK,IAAIX,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACL,mBAAmB,EAAEK,CAAC,EAAE,EAAE;MAC/C,IAAIA,CAAC,GAAG,IAAI,CAACL,mBAAmB,GAAG,CAAC,EAAE;QAClCgB,IAAI,IAAI,IAAI,CAACR,eAAe,CAACH,CAAC,CAAC,CAACY,IAAI,GAAG,IAAI;MAC/C,CAAC,MACI;QACDD,IAAI,IAAI,IAAI,CAACR,eAAe,CAACH,CAAC,CAAC,CAACY,IAAI,GAAG,GAAG;MAC9C;IACJ;IACA,OAAOD,IAAI;EACf;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIE,2BAA2BA,CAAA,EAAG;IAC1B,IAAIC,OAAO,GAAG,EAAE;IAChB,KAAK,IAAId,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACH,qBAAqB,EAAEG,CAAC,EAAE,EAAE;MACjD,IAAIA,CAAC,GAAG,IAAI,CAACH,qBAAqB,GAAG,CAAC,EAAE;QACpCiB,OAAO,IAAI,IAAI,CAACf,iBAAiB,CAACC,CAAC,CAAC,CAACY,IAAI,GAAG,IAAI;MACpD,CAAC,MACI;QACDE,OAAO,IAAI,IAAI,CAACf,iBAAiB,CAACC,CAAC,CAAC,CAACY,IAAI,GAAG,GAAG;MACnD;IACJ;IACA,OAAOE,OAAO;EAClB;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}