# Count Alpha fixes - Original line 140

###############################################################################
# The `count_alpha()`function will return the number of characters in the string
# that are alphabetic.
# Typical usage would be:
#         my_obj = CharacterCounter("some string")
#         printf("Count Alpha =", my_obj.count_alpha())
# The given solution uses the Regular Expression Library to search the data
# for the specified pattern.
#
def count_alpha(self):
    """
    Count number of alphabetic characters in text
    return: Number of alphabetic characters
    """

    alpha = re.compile(r'[a-z]') <-----> This is line with the original bug <-----> This was fixed to: alpha = re.compile(r'[a-zA-Z]') (Did not count capital letters before)
    return len(alpha.findall(self.text))

# Count Numeric fixes - Original line 158

###############################################################################
# The `count_numeric()`function will return the number of characters in the string
# that are numeric.
# Typical usage would be:
#         my_obj = CharacterCounter("some string")
#         printf("Count Numeric =", my_obj.count_numeric())
# The given solution uses the Regular Expression Library to search the data
# for the specified pattern.
#
def count_numeric(self):
    """
    Count number of numeric characters in text
    return: Number of numeric characters
    """

    numeric = re.compile(r'[1-9]')
    return len(numeric.findall(self.text)) <-----> This is line with the original bug <-----> This was fixed to: numeric = re.compile(r'[0-9]') (Did not count 0 before)

# Count Vowels fixes - Original line 176

###############################################################################
# The `count_vowels()`function will return the number of characters in the string
# that are vowels (we do not consider the character `y` to be a vowel).
# Typical usage would be:
#         my_obj = CharacterCounter("some string")
#         printf("Count Vowels =", my_obj.count_vowels())
# The given solution uses the Regular Expression Library to search the data
# for the specified pattern.
#
def count_vowels(self):
    """
    Count number of vowels in text
    return: Number of vowels
    """

    vowels = re.compile(r'[aeou]', re.IGNORECASE)
    return len(vowels.findall(self.text)) <-----> This is line with the original bug <-----> This was fixed to: vowels = re.compile(r'[aeiou]', re.IGNORECASE) (Did not count i before)

# Count is_phonenumber fixes - Original line 199

###############################################################################
# The `is_phonenumber()`function will return TRUE if the characters in the string
# that represent a valid phone number.
# Typical usage would be:
#         my_obj = CharacterCounter("some string")
#         printf("Is a phone number =", my_obj.is_phonenumber())
# The given solution uses the Regular Expression Library to search the data
# for the specified pattern.
#
# For this assignment, follow the following rules for phone number:
#   * the only format allowed is ###-###-####
#           <area_code> - <central_office_code> - <line_number>
#   * <area_code> and <central_office_code> cannot have first digit as 0 or 1 
#   * <area_code> cannot have middle digit as 9 
#
def is_phonenumber(self):
    """
    Check if text is a valid US phone number
    return: True or False
    """

    phonenum = re.compile(r'^[1-9]{3}([\-.])*[1-9]{3}\1*[1-9]{3}$') <-----> This is line with the original bug <-----> This was fixed to: phonenum = re.compile(r'^[2-9][0-8][0-9]-[2-9][0-9]{2}-[0-9]{4}$') 
    if phonenum.match(self.text) is None:
        return False
    else:
        return True

(Did not check for the first digit of the area code and central office code, did not check for the middle digit of the area code, 
had parenthesis around the central office code, allowed for periods between area code and central office number, removed excess '\1', 
line number did not have a limit of 4 digits)